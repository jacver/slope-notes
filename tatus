[1mdiff --git a/README.md b/README.md[m
[1mindex 8df4fd9..c9f492b 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,6 +1,6 @@[m
[31m-Pulling ISODate from MongoDB to Node:[m
[32m+[m[32mComparing params to db[m
 [m
[31m-https://stackoverflow.com/questions/46926743/node-express-how-to-pass-date-params-in-url-query-string-and-how-to-parse-that[m
[32m+[m[32mhttps://webapplog.com/url-parameters-and-routing-in-express-js/[m
 [m
 Ref one schema with another:[m
 http://learnmongodbthehardway.com/schema/schemabasics/#:~:text=retrieve%20the%20document.-,One%2DTo%2DMany%20(1%3AN),related%20to%20a%20single%20Blog.[m
[1mdiff --git a/controllers/dateControllers.js b/controllers/dateControllers.js[m
[1mindex dfb5483..09d1ad0 100644[m
[1m--- a/controllers/dateControllers.js[m
[1m+++ b/controllers/dateControllers.js[m
[36m@@ -31,50 +31,28 @@[m [mfunction formatDate(date) {[m
 //   });[m
 // });[m
 [m
[31m-// // show specific date JSON[m
[32m+[m[32m// // show specific dates at a specific resort[m
 dateRouter.get('/:formattedDate', (req, res) => {[m
[31m-  const formattedDate = req.params.formattedDate; // get name[m
[31m-  res.locals.query = formattedDate; // allows use of formattedDate in template. Reference as "query"[m
[32m+[m[32m  const formattedDate = req.params.formattedDate;[m
 [m
[31m-  SlopeDay.find({}, { date: 1, _id: 0 }) // isolate dates[m
[32m+[m[32m  SlopeDay.find({}) // isolate dates[m
     .then((dateObj) => {[m
[31m-      // needs to be[m
[31m-      console.log(dateObj);[m
[32m+[m[32m      dateObj.forEach((date, i) => {[m
[32m+[m[32m        let dateStr =[m
[32m+[m[32m          // MM-DD-YYYY reformatting to string[m
[32m+[m[32m          ('0' + (date.date.getMonth() + 1)).slice(-2) +[m
[32m+[m[32m          '-' +[m
[32m+[m[32m          ('0' + date.date.getDate()).slice(-2) +[m
[32m+[m[32m          '-' +[m
[32m+[m[32m          date.date.getFullYear();[m
[32m+[m[32m        const objWithFormattedDate = dateObj.map((obj) => {[m
[32m+[m[32m          return { ...obj, formattedDate: dateStr, isNew: true };[m
[32m+[m[32m        });[m
[32m+[m[32m        console.log(objWithFormattedDate);[m
[32m+[m[32m      });[m
     });[m
 });[m
 [m
[31m-// create new resort[m
[31m-//  **IMPORTANT** when creating new resort, pass date as YYYY-MM-DD string and mongoDB will use Date() to create it as a date[m
[31m-// dateRouter.post("/", (req, res) => {[m
[31m-//   Date.create(req.body)[m
[31m-//     .then((newDate) => {[m
[31m-//       res.json(newDate);[m
[31m-//     })[m
[31m-//     .catch((err) => console.log(err));[m
[31m-// });[m
[31m-[m
[31m-// update existing Date by ID[m
[31m-// dateRouter.put("/:id", (req, res) => {[m
[31m-//   const id = { _id: req.params.id };[m
[31m-//   Date.findByIdAndUpdate(id, req.body)[m
[31m-//     .then((updatedDate) => {[m
[31m-//       res.json(updatedDate);[m
[31m-//       // just sending json here so no need to mess with route redirection praise god[m
[31m-//     })[m
[31m-//     .catch((err) => {[m
[31m-//       console.log(err);[m
[31m-//       res.json(err);[m
[31m-//     });[m
[31m-// });[m
[31m-[m
[31m-// // delete existing Date by ID[m
[31m-// dateRouter.delete("/:id", (req, res) => {[m
[31m-//   const id = { _id: req.params.id };[m
[31m-//   Date.findByIdAndDelete(id, (err, deletedDate) => {[m
[31m-//     err ? console.log(err) : console.log("DELETED: ", deletedDate);[m
[31m-//   });[m
[31m-// });[m
[31m-[m
 // END DATE ROUTE CONTROLLERS *[m
 [m
 module.exports = dateRouter;[m
